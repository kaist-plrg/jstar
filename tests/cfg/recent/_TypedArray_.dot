digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;Let id:{constructorName} be the String value of the Constructor Name value specified in link:{unhandled: table-the-typedarray-constructors} for this &lt; var &gt; TypedArray &lt; / var &gt; constructor .&quot;</td></tr>
      <tr><td align="left">2:??? &quot;Let id:{proto} be &lt; code &gt; \&quot; % &lt; var &gt; TypedArray &lt; / var &gt; . prototype % \&quot; &lt; / code &gt; .&quot;</td></tr>
      <tr><td align="left">3:let numberOfArgs = args.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10 [shape=diamond, label=<<font color="black">(= (typeof firstArgument) Object)</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=cds, label=<<font color="black">11:app __x2__ = (InitializeTypedArrayFromTypedArray O firstArgument)</font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=diamond, label=<<font color="black">(== numberOfArgs 0i)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let firstArgument = args[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13 [shape=diamond, label=<<font color="black">(! (= firstArgument.TypedArrayName absent))</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let args = argumentsList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let O = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let byteOffset = args[1i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=cds, label=<<font color="black">9:app __x1__ = (AllocateTypedArray constructorName NewTarget proto)</font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:return [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:[? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:[? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node37 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:let elementLength = [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node25 [shape=cds, label=<<font color="black">18:app __x4__ = (GetMethod firstArgument SYMBOL_iterator)</font>> color="black" fillcolor="white" style=filled]
  node20 [shape=diamond, label=<<font color="black">(&lt; 2i numberOfArgs)</font>> color="black" fillcolor="white" style=filled]
  node29 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let values = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let length = args[2i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node33 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:[? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node28 [shape=cds, label=<<font color="black">20:app __x5__ = (IterableToList firstArgument usingIterator)</font>> color="black" fillcolor="white" style=filled]
  node38 [shape=cds, label=<<font color="black">29:app __x9__ = (AllocateTypedArray constructorName NewTarget proto elementLength)</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=diamond, label=<<font color="black">(&lt; 1i numberOfArgs)</font>> color="black" fillcolor="white" style=filled]
  node32 [shape=cds, label=<<font color="black">24:app __x7__ = (InitializeTypedArrayFromArrayLike O firstArgument)</font>> color="black" fillcolor="white" style=filled]
  node34 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node22 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let length = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node27 [shape=diamond, label=<<font color="black">(! (= usingIterator undefined))</font>> color="black" fillcolor="white" style=filled]
  node7 [shape=cds, label=<<font color="black">5:app __x0__ = (AllocateTypedArray constructorName NewTarget proto 0i)</font>> color="black" fillcolor="white" style=filled]
  node39 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:return [? __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node35 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:assert (! (is-instance-of firstArgument OrdinaryObject))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16 [shape=diamond, label=<<font color="black">(! (= firstArgument.ArrayBufferData absent))</font>> color="black" fillcolor="white" style=filled]
  node31 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:[? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let usingIterator = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=cds, label=<<font color="black">15:app __x3__ = (InitializeTypedArrayFromArrayBuffer O firstArgument byteOffset length)</font>> color="black" fillcolor="white" style=filled]
  node36 [shape=cds, label=<<font color="black">28:app __x8__ = (ToIndex firstArgument)</font>> color="black" fillcolor="white" style=filled]
  node30 [shape=cds, label=<<font color="black">21:app __x6__ = (InitializeTypedArrayFromList O values)</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let byteOffset = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5 -> node6 [ color="black"]
  node7 -> node8 [ color="black"]
  node8 -> node1 [ color="black"]
  node18 -> node20 [ color="black"]
  node11 -> node12 [ color="black"]
  node24 -> node34 [ color="black"]
  node25 -> node26 [ color="black"]
  node32 -> node33 [ color="black"]
  node28 -> node29 [ color="black"]
  node29 -> node30 [ color="black"]
  node2 -> node3 [ color="black"]
  node3 -> node4 [label=<<font color="black">true</font>> color="black"]
  node3 -> node5 [label=<<font color="black">false</font>> color="black"]
  node19 -> node20 [ color="black"]
  node27 -> node28 [label=<<font color="black">true</font>> color="black"]
  node27 -> node32 [label=<<font color="black">false</font>> color="black"]
  node35 -> node36 [ color="black"]
  node6 -> node7 [label=<<font color="black">true</font>> color="black"]
  node6 -> node9 [label=<<font color="black">false</font>> color="black"]
  node12 -> node13 [ color="black"]
  node0 -> node2 [ color="black"]
  node15 -> node34 [ color="black"]
  node22 -> node23 [ color="black"]
  node13 -> node14 [label=<<font color="black">true</font>> color="black"]
  node13 -> node16 [label=<<font color="black">false</font>> color="black"]
  node36 -> node37 [ color="black"]
  node39 -> node1 [ color="black"]
  node9 -> node10 [ color="black"]
  node31 -> node34 [ color="black"]
  node37 -> node38 [ color="black"]
  node16 -> node17 [label=<<font color="black">true</font>> color="black"]
  node16 -> node25 [label=<<font color="black">false</font>> color="black"]
  node23 -> node24 [ color="black"]
  node14 -> node15 [ color="black"]
  node30 -> node31 [ color="black"]
  node34 -> node1 [ color="black"]
  node26 -> node27 [ color="black"]
  node10 -> node11 [label=<<font color="black">true</font>> color="black"]
  node10 -> node35 [label=<<font color="black">false</font>> color="black"]
  node20 -> node21 [label=<<font color="black">true</font>> color="black"]
  node20 -> node22 [label=<<font color="black">false</font>> color="black"]
  node4 -> node5 [ color="black"]
  node38 -> node39 [ color="black"]
  node21 -> node23 [ color="black"]
  node33 -> node34 [ color="black"]
  node17 -> node18 [label=<<font color="black">true</font>> color="black"]
  node17 -> node19 [label=<<font color="black">false</font>> color="black"]
}
