digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let promiseCapability = [! __x0__]</td></tr>
      <tr><td align="left">3:let syncIterator = O.SyncIteratorRecord.Iterator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw = throw.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=cds, label=<<font color="black">4:app __x1__ = (GetMethod syncIterator &quot;throw&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=diamond, label=<<font color="black">(= throw.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node13 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=diamond, label=<<font color="black">(&amp;&amp; (is-completion __x2__) (! (= __x2__.Type CONST_normal)))</font>> color="black" fillcolor="white" style=filled]
  node7 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let throw = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:[! __x3__]</td></tr>
      <tr><td align="left">8:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=cds, label=<<font color="black">app __x2__ = (Call promiseCapability.Reject undefined (new [throw.Value]))</font>> color="black" fillcolor="white" style=filled]
  node8 [shape=diamond, label=<<font color="black">(is-completion throw)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">2:app __x0__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:throw</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=diamond, label=<<font color="black">(is-completion result)</font>> color="black" fillcolor="white" style=filled]
  node25 [shape=diamond, label=<<font color="black">(= result.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node20 [shape=cds, label=<<font color="black">10:app __x4__ = (Call throw syncIterator (new [value]))</font>> color="black" fillcolor="white" style=filled]
  node29 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node28 [shape=diamond, label=<<font color="black">(&amp;&amp; (is-completion __x6__) (! (= __x6__.Type CONST_normal)))</font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let result = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node33 [shape=cds, label=<<font color="black">15:app __x7__ = (Call promiseCapability.Reject undefined (new [(new OrdinaryObject())]))</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=cds, label=<<font color="black">7:app __x3__ = (Call promiseCapability.Reject undefined (new [value]))</font>> color="black" fillcolor="white" style=filled]
  node32 [shape=diamond, label=<<font color="black">(! (= (typeof result) Object))</font>> color="black" fillcolor="white" style=filled]
  node34 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:[! __x7__]</td></tr>
      <tr><td align="left">16:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node22 [shape=cds, label=<<font color="black">12:app __x5__ = (Call throw syncIterator)</font>> color="black" fillcolor="white" style=filled]
  node27 [shape=cds, label=<<font color="black">app __x6__ = (Call promiseCapability.Reject undefined (new [result.Value]))</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = this</td></tr>
      <tr><td align="left">1:assert (&amp;&amp; (= (typeof O) Object) (! (= O.SyncIteratorRecord absent)))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node35 [shape=cds, label=<<font color="black">17:app __x8__ = (AsyncFromSyncIteratorContinuation result promiseCapability)</font>> color="black" fillcolor="white" style=filled]
  node16 [shape=diamond, label=<<font color="black">(= throw undefined)</font>> color="black" fillcolor="white" style=filled]
  node31 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">result = result.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let result = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node36 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:return [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node30 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19 [shape=diamond, label=<<font color="black">(! (= value absent))</font>> color="black" fillcolor="white" style=filled]
  node29 -> node30 [ color="black"]
  node0 -> node2 [ color="black"]
  node26 -> node31 [ color="black"]
  node4 -> node5 [ color="black"]
  node8 -> node9 [label=<<font color="black">true</font>> color="black"]
  node8 -> node15 [label=<<font color="black">false</font>> color="black"]
  node16 -> node17 [label=<<font color="black">true</font>> color="black"]
  node16 -> node19 [label=<<font color="black">false</font>> color="black"]
  node32 -> node33 [label=<<font color="black">true</font>> color="black"]
  node32 -> node35 [label=<<font color="black">false</font>> color="black"]
  node17 -> node18 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
  node24 -> node25 [label=<<font color="black">true</font>> color="black"]
  node24 -> node31 [label=<<font color="black">false</font>> color="black"]
  node36 -> node1 [ color="black"]
  node7 -> node8 [ color="black"]
  node34 -> node35 [ color="black"]
  node18 -> node19 [ color="black"]
  node2 -> node3 [ color="black"]
  node15 -> node16 [ color="black"]
  node11 -> node12 [ color="black"]
  node25 -> node26 [label=<<font color="black">true</font>> color="black"]
  node25 -> node27 [label=<<font color="black">false</font>> color="black"]
  node9 -> node10 [label=<<font color="black">true</font>> color="black"]
  node9 -> node11 [label=<<font color="black">false</font>> color="black"]
  node10 -> node15 [ color="black"]
  node13 -> node14 [ color="black"]
  node35 -> node36 [ color="black"]
  node22 -> node23 [ color="black"]
  node6 -> node7 [ color="black"]
  node27 -> node28 [ color="black"]
  node19 -> node20 [label=<<font color="black">true</font>> color="black"]
  node19 -> node22 [label=<<font color="black">false</font>> color="black"]
  node23 -> node24 [ color="black"]
  node14 -> node15 [ color="black"]
  node31 -> node32 [ color="black"]
  node30 -> node31 [ color="black"]
  node28 -> node29 [label=<<font color="black">true</font>> color="black"]
  node28 -> node30 [label=<<font color="black">false</font>> color="black"]
  node20 -> node21 [ color="black"]
  node21 -> node24 [ color="black"]
  node33 -> node34 [ color="black"]
  node12 -> node13 [label=<<font color="black">true</font>> color="black"]
  node12 -> node14 [label=<<font color="black">false</font>> color="black"]
}
