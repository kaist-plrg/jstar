digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=cds, label=<<font color="black">1:app __x0__ = (RequireInternalSlot target &quot;TypedArrayName&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:[? __x0__]</td></tr>
      <tr><td align="left">2:assert (! (= target.ViewedArrayBuffer absent))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=diamond, label=<<font color="black">(&lt; targetOffset 0i)</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app source = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node7 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIntegerOrInfinity offset)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">app offset = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:??? &quot;If id:{source} is an Object that has a [ [ TypedArrayName ] ] internal slot , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">7:??? &quot;Else , in:{} out:{}&quot;</td></tr>
      <tr><td align="left">9:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let targetOffset = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let target = this</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 -> node8 [ color="black"]
  node2 -> node3 [ color="black"]
  node9 -> node10 [label=<<font color="black">true</font>> color="black"]
  node9 -> node11 [label=<<font color="black">false</font>> color="black"]
  node0 -> node2 [ color="black"]
  node6 -> node7 [ color="black"]
  node11 -> node1 [ color="black"]
  node10 -> node11 [ color="black"]
  node4 -> node5 [ color="black"]
  node8 -> node9 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
}
